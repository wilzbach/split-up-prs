#!/bin/bash
#
# This will submit all your changes in a separate PR for each file.
#
# Warning:
# --------
# This is in an alpha version. Make a backup of your changes and use only if you
# have a decent experience with git

PREFIX=""                           # prefix tag to use for commit and PR message
SIMULATE=1                          # only show which files would be submitted
STEP_BY_STEP=1                      # only submit on PR per run
UPSTREAM_BRANCH="master"            # upstream branch
HUB_PROGRAM="hub"                   # tool to submit pull request

# for debugging:
#set -uexo

echo "Warning. This tool is in alpha-phase and should be used with great care".
err="/dev/null"

# parse all options
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -p|--prefix)
        PREFIX="$2"
        shift
    ;;
    -f|--simulate)
        SIMULATE=0
        echo "Warning: you are now ending the simulation and working with real files."
    ;;
    -a|--all)
        STEP_BY_STEP=0
    ;;
    *)
        echo "$key is unknown"
        exit 1
    ;;
esac
shift # past argument or value
done

# unstages everything, so we can start from scratch
git reset master 2> $err > $err

files=$(git status --porcelain | cut -c4- )

if [ -z "$files" ] ; then
    echo "No changes."
    exit 1
fi

# we might have some directories in here
files=$(echo "${files}" | tr ' ' '\n' | xargs -I {} find {} -type f)

# using the CLI tool hub is the most convenient option, otherwise we will show a URL
hubInstalled=$(which "$HUB_PROGRAM" 2>/dev/null | grep -v "not found" | wc -l)
if [ ! $hubInstalled ] ; then
    # gets your github username, might not work on every platform
    gitUser=$(git remote -v | grep origin | head | sed -E 's!.*github.com:+/+(.*)/dlang-tour.*$!\1!')
fi

# auto-detect upstream
if [ $hubInstalled -eq 0 ] ; then
    if git remote -v | grep -q 'upstream' ; then
        UPSTREAM_REMOTE_REPO="upstream"
        UPSTREAM_REPO=$(git remote -v | grep 'upstream' | grep 'push' | grep -ohP -m 1 '(?<=:)([^.]*)' | sed 's!^/!!' | tr -d '/n')
        echo "Detected upstream repo is: ${UPSTREAM_REPO} (please use 'hub' or report an issue if this is not correct)"
    else
        echo "Please set an upstream repository (git remote add origin git@github.com:dlang-tour/english.git) or install 'hub'".
        exit 1
    fi
fi

for filename in $files ; do
    # for simplicity skip index.yml an
    if [ $(basename "$filename") == "index.yml" ] ; then
        continue
    fi

    # there are some issues with using path as git branches, better replace them
    # for visual beauty we strip of the filename too
    shortFileName=$(echo "$filename" | sed 's!public/content/!!' | sed 's!/!_!g' | sed 's/[.].*$//')

    echo "Adding file: ${filename} (branch: $shortFileName)"
    if [ $SIMULATE -eq 1 ] ; then
        continue
    fi

    git checkout master 2> $err > $err
    # defensive removal of existing branches, it won't remove unmerged branches!
    gb -d "$shortFileName" 2> /dev/null || true
    git checkout -b $shortFileName

    if [ $(git rev-parse --abbrev-ref HEAD) == "master" ] ; then
        echo "Something went wrong when creating a new branch. Does the branch already exit?"
        exit 1
    fi

    git add "$filename"

    # commit & submit
    commitMessage="${PREFIX} ${shortFileName}"
    git commit -m "$commitMessage"
    git push --set-upstream origin $shortFileName

    if [ $hubInstalled -eq 0 ] ; then
        $HUB_PROGRAM pull-request -m "$commitMessage"
    else
        # this should be cross-platform, but it's not tested
        xdg-open "https://github.com/$UPSTREAM_REPO/compare/$UPSTREAM_BRANCH...$gitUser:$shortFileName"
    fi

    if [ $STEP_BY_STEP -eq 1 ] ; then
        echo "step-by-step executing is activated. use -a/--all to run for all remaining."
        break
    fi
done

git checkout master 2> $err > $err

if [ $SIMULATE -eq 1 ] ; then
    echo "Simulation was run. Now use -f/--force to apply."
fi
